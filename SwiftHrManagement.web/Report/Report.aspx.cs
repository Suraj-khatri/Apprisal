using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Text;
using System.Threading;
using SwiftHrManagement.DAL.Report;
using SwiftHrManagement.web.Library;

namespace SwiftHrManagement.web.Report
{
    public partial class Report : BasePage
    {
        private Boolean AllowDrillDown;
        private string cssClass = "TBL";
        private string fieldAlignment = "";
        private string fieldFormat = "";
        private string fieldWrap = "";
        private string tblCaption = "";
        private Boolean mergeColumnHead;
        private ReportResult reportResult = new ReportResult();
        private string excludeColumns = "";
        private bool includeSerialNo = false;
        private bool useDBRowColorCode = false;
        private int subTotalBy = -1;
        private int totalTextCol = -1;
        private int subTotalTextCol = -1;
        private string subTotalFields = "";
        private string subTotalText = "";
        private string totalFields = "";
        private string totalText = "";
        private int totalPage = 0;
        private int pageNo = 0;
        private double grandTotal = 0.00;
        private double grandTotalUsd = 0.00;
        private double grandTotal_1 = 0.00;
        private string reportName = "";
        private int extraCol = 0;
        private string flag = "";
        private string isExportFull = "";
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (ReadSession().Emp_Id.ToString() == "")
                    Response.Redirect(GetStatic.GetDefaultPage());
            }
            PrintReport();
        }
        private void PrintHead()
        {
            Page.Title = reportResult.ReportHead;
            head.InnerHtml = reportResult.ReportHead;
        }

        private void PrintFilters()
        {
            var user = ReadSession().Emp_Id.ToString();
            var now = System.DateTime.Now.ToString();
            filters.InnerHtml = "Filters Applied : <br />" + reportResult.Filters +
                                "<br /><br />Generated On=" + now +
                                " || Generated By=" + user;
        }

        private void PrintError()
        {
            rptDiv.InnerHtml = "<div class = \"reportError\">" + reportResult.Msg + "</div>";
        }

        private void PrintReport()
        {
            string reportName = GetStatic.ReadQueryString("reportName", "").ToLower();
            string mode = GetStatic.ReadQueryString("mode", "").ToLower();

            reportResult = PrepareReport(reportName);

            if (mode == "download")
            {
                string format = GetStatic.ReadQueryString("format", "xls");
                Response.Clear();
                Response.ClearContent();
                Response.ClearHeaders();
                Response.ContentType = "application/vnd.ms-excel";
                Response.AddHeader("Content-Disposition", "inline; filename=" + reportName + "." + format);
                exportDiv.Visible = false;
            }

            PrintHead();
            PrintFilters();

            if (reportResult.ErrorCode != "0")
            {
                PrintError();
                return;
            }
           
            DataTable dt = reportResult.ResultSet;
            
            string reportText = GenerateReport(ref dt);
            rptDiv.InnerHtml = reportText;
        }

        private ReportResult PrepareReport(string reportName)
        {
            if (reportName == "medicalreport")
                reportResult = PrepareMedicalClaimReport();
            if (reportName == "fa_detail")
                reportResult = PrepareFaDetail();
            if (reportName == "fa_summary")
                reportResult = PrepareFaSummary();
            if (reportName == "fa_dep_detail")
                reportResult = PrepareFaDepDetailRpt();
            if (reportName == "fa_dep_groupwise")
                reportResult = PrepareFaDepGroupWiseRpt();
            if (reportName == "fa_dep_summary")
                reportResult = PrepareFaDepSummaryRpt();
            if (reportName == "datewise_fa")
                reportResult = PrapareDateWiseFaRpt();
            if (reportName == "grpwise_fa")
                reportResult = PrapareGrpWiseFaRpt();
            if (reportName == "mds_detail")
                reportResult = PrepareMDSRpt();           
            return reportResult;
        }

        private ReportResult PrepareMedicalClaimReport()
        {
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string claimType = GetStatic.ReadQueryString("claimType", "");
            string ddlClaimStatus = GetStatic.ReadQueryString("ddlClaimStatus", "");
            string user = ReadSession().Emp_Id.ToString();

            return (new ReportDao().GetMedicalClaimReport(user, fromDate, toDate, claimType, ddlClaimStatus));
        }

        private ReportResult PrepareFaDetail()
        {
            mergeColumnHead = true;
            fieldFormat =    "||||||||N|N|N|N|N|N|N||||||||||";
            fieldAlignment = "||||||||R|R|R|R|R|R|R||||||||||";
            //fieldFormat = "||||||||N|N|N||||||N|N|N|";
            //fieldAlignment = "||||||||R|R|R||||||R|R|R|";
            totalText = "<b>Total</b>";
            totalFields = "8|9|10|11|12|13";
            totalTextCol = 1;

            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string branchId = GetStatic.ReadQueryString("branchId", "");
            string deptId = GetStatic.ReadQueryString("deptId", "");
            string groupId = GetStatic.ReadQueryString("groupId", "");
            string assetType = GetStatic.ReadQueryString("assetType", "");
            string assetNumber = GetStatic.ReadQueryString("assetNumber", "");
            string user = ReadSession().UserName;

            return (new ReportDao().GetFaDetail(user, branchId, deptId, groupId, assetType, assetNumber, pageNumber, GetStatic.GetReportPagesize()));
        }

        private ReportResult PrepareFaSummary()
        {
            string branchId = GetStatic.ReadQueryString("branchId", "");
            string rptType = GetStatic.ReadQueryString("rptType", "");
            string user = ReadSession().UserName;
            if (rptType == "grpWise" || rptType == "branchWise")
            {
                fieldFormat = "||N|N|N";
                fieldAlignment = "||R|R|R";
                totalText = "<b>Total</b>";
                totalFields = "2|3|4";
                totalTextCol = 1;
            }
            if (rptType == "cost" || rptType == "accDep" || rptType == "netValue")
            {
                fieldFormat = "||N|N|N|N|N|N|N|N|N|N|N|N|N|N|N|N|N";
                fieldAlignment = "||R|R|R|R|R|R|R|RR|R|R|R|R|R|R|R|R";
                totalText = "<b>Total</b>";
                totalFields = "2|3|4|5|6|7|8|9|10|11|12|13|14|15|16";
                totalTextCol = 1;
            }
            return (new ReportDao().GetFaSummary(user, branchId, rptType));
        }

        private ReportResult PrepareFaDepDetailRpt()
        {
            mergeColumnHead = true;
            fieldFormat = "|||||||N|N|N|N|N|N";
            fieldAlignment = "|||||||R|R|R|R|R|R";
            totalText = "<b>Total</b>";
            totalFields = "7|8|9|10|11|12";
            totalTextCol = 1;
            subTotalBy = 1;
            subTotalFields = "7|8|9|10|11|12";
            subTotalText = "Sub Total";
            subTotalTextCol = 1;

            string branchId = GetStatic.ReadQueryString("branchId", "");
            string fy = GetStatic.ReadQueryString("fy", "");
            string month = GetStatic.ReadQueryString("month", "");
            string user = ReadSession().UserName;

            return (new ReportDao().GetFaDepDetailRpt(user, branchId, fy, month));
        }

        private ReportResult PrepareFaDepGroupWiseRpt()
        {
            //fieldFormat = "||N|N|N";
            //fieldAlignment = "||R|R|R";
            //totalText = "<b>Total</b>";
            //totalFields = "2|3|4";
            //totalTextCol = 1;

            fieldFormat = "||N|N|N|N|N|N|N|N|N|N|N|N|N|N|N|N|N";
            fieldAlignment = "||R|R|R|R|R|R|R|RR|R|R|R|R|R|R|R|R";
            totalText = "<b>Total</b>";
            totalFields = "2|3|4|5|6|7|8|9|10|11|12|13|14|15|16";
            totalTextCol = 1;

            string branchId = GetStatic.ReadQueryString("branchId", "");
            string fy = GetStatic.ReadQueryString("fy", "");
            string month = GetStatic.ReadQueryString("month", "");
            string user = ReadSession().UserName;

            return (new ReportDao().GetFaDepGroupWiseRpt(user, branchId, fy, month));
        }

        private ReportResult PrepareFaDepSummaryRpt()
        {
            mergeColumnHead = true;
            fieldFormat = "||||N|N|N|N|N|N|N|N|N|N|N|N|N";
            fieldAlignment = "||||R|R|R|R|R|R|R|R|R|R|R|R|R";
            totalText = "<b>Total</b>";
            totalFields = "|4|5|6|7|8|9|10|11|12|13|14";
            totalTextCol = 1;
            subTotalBy = 1;
            subTotalFields = "|4|5|6|7|8|9|10|11|12|13|14";
            subTotalText = "Sub Total";
            subTotalTextCol = 1;

            string branchId = GetStatic.ReadQueryString("branchId", "");
            string fy = GetStatic.ReadQueryString("fy", "");
            string month = GetStatic.ReadQueryString("month", "");
            string user = ReadSession().UserName;

            return (new ReportDao().GetFaDepSummaryRpt(user, branchId, fy, month));
        }

        private ReportResult PrapareDateWiseFaRpt()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string branch = GetStatic.ReadQueryString("branch", "");
            string group = GetStatic.ReadQueryString("group", "");
            string assetType = GetStatic.ReadQueryString("assetType", "");
            string rptType = GetStatic.ReadQueryString("rptType", "");
            string user = ReadSession().UserName;

            mergeColumnHead = true;

            if (rptType.Equals("book"))
            {
                fieldFormat = "|||||N|N|N||||||||N|N|N||";
                fieldAlignment = "|||||R|R|R||||||||R|R|R||";
                totalFields = "5|6|7|15|16|17";         
            }else if( rptType.Equals("writeoff"))
            {

                fieldFormat = "|||||N|N|N||||N||||||||";
                fieldAlignment = "|||||R|R|R||||R||||||||";
                totalFields = "5|6|7|11|12|13";
            }
            else if (rptType.Equals("transfer"))
            {
                fieldFormat =    "|||||N|N|N||||||||||||||N|";
                fieldAlignment = "|||||R|R|R||||||||||||||R|";
                totalFields = "5|6|7|21";     
            } else if (rptType.Equals("capitalization"))
            {
                fieldFormat =    "|||||N|N|N|||||R|||||||||";
                fieldAlignment = "|||||R|R|R|||||R|||||||||";
                totalFields = "5|6|7|12"; 
            }else
            {
                fieldFormat = "|||||N|N|N|||";
                fieldAlignment = "|||||R|R|R|||";             
                totalFields = "5|6|7";                
            }
            totalText = "<b>Total</b>";
            totalTextCol = 1;


            return (new ReportDao().GetDatewiseFaRpt(user, fromDate, toDate, branch, group, assetType, rptType, pageNumber, GetStatic.GetReportPagesize()));
        }

        private ReportResult PrapareGrpWiseFaRpt()
        {
            mergeColumnHead = true;
            fieldFormat = "||N|N|N";
            fieldAlignment = "||R|R|R";
            totalText = "<b>Total</b>";
            totalFields = "2|3|4";
            totalTextCol = 1;

            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string branchId = GetStatic.ReadQueryString("branchId", "");
            string groupId = GetStatic.ReadQueryString("groupId", "");
            string user = ReadSession().UserName;

            return (new ReportDao().GrpWiseFaRpt(user, fromDate, toDate, branchId, groupId, pageNumber, GetStatic.GetReportPagesize()));
        }

        private ReportResult PrepareMDSRpt()
        {
            mergeColumnHead = true;
            fieldFormat = "|||||N|||||||";
            fieldAlignment = "|||||R|||||||";

            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string fromBranch = GetStatic.ReadQueryString("fromBranch", "");
            string toBranch = GetStatic.ReadQueryString("toBranch", "");
            string user = ReadSession().UserName;

            return (new ReportDao().GetMDSDetailRpt(user, fromDate, toDate, fromBranch, toBranch));
        }
        
        #region Generate Report

        public String GenerateReport(ref DataTable dt)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-us");

            var html = new StringBuilder("");
            html.AppendLine("<div style = \"float:left;clear:both\">");
            html.AppendLine("<table border=\"0\" class=\"" + cssClass +
                            "\" cellpadding=\"0\" cellspacing=\"0\" align=\"left\">");
            html.AppendLine(CreateReportHead(ref dt, mergeColumnHead));
            html.AppendLine(CreateReportBody(ref dt, subTotalFields, totalFields));
            html.AppendLine("<tr><td colspan='12' align='center'>");

            if (totalPage == 0)
                totalPage = 1;

            html.AppendLine("<strong>Page " + (pageNo == 0 ? 1 : pageNo) + " of " + totalPage + "</strong>");
            html.AppendLine("</td></tr>");
            html.AppendLine("</table>");
            html.AppendLine("</div>");
            return html.ToString();
        }

        private String CreateReportBody(ref DataTable dt, string subTotalFieldList, string totalFieldList)
        {
            int cnt = 0;
            var body = new StringBuilder("");

            bool doSubTotal = subTotalBy > -1 ? true : false;
            bool doTotal = totalFieldList != "" ? true : false;

            string[] totalFieldsArray = totalFieldList.Replace(" ", "").Split('|');
            var totalValues = new double[totalFieldsArray.Length];

            string[] subTotalFieldsArray = subTotalFieldList.Replace(" ", "").Split('|');
            var subTotalValues = new double[subTotalFieldsArray.Length];

            string[] fieldFormatList = fieldFormat.Replace(" ", "").Split('|');


            string tmpSubTotalText = "||";

            foreach (DataRow row in dt.Rows)
            {
                if (doSubTotal)
                {
                    if (tmpSubTotalText == "||")
                        tmpSubTotalText = row[subTotalBy].ToString();

                    if (tmpSubTotalText != row[subTotalBy].ToString())
                    {
                        body.AppendLine(CreateTotalRow(ref dt, subTotalText, subTotalBy, subTotalFieldsArray,
                                                       subTotalValues, fieldFormatList, fieldAlignment, fieldWrap));
                        tmpSubTotalText = row[subTotalBy].ToString();

                        for (int i = 0; i < subTotalValues.Length; i++)
                        {
                            subTotalValues[i] = 0;
                        }
                    }
                }
                body.AppendLine(++cnt % 2 == 1 ? "<tr>" : "<tr style=\"background: #F0F0F0;\">");

                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    string format = GetFormat(fieldFormatList, i);

                    string data = row[i].ToString();
                    if (format != "")
                    {
                        double dataParse;
                        double.TryParse(row[i].ToString(), out dataParse);
                        data = dataParse < 0 ? GetStatic.ParseMinusValue(dataParse) : dataParse.ToString(format);
                        //Parse Minus Value
                    }
                    if (AllowDrillDown)
                    {
                        data = CreateLink(data);
                    }
                    string alignment = GetAlignment(fieldAlignment, i);
                    string noWrapProperty = GetNoWrapping(fieldWrap, i);
                    body.AppendLine("<td" + alignment + noWrapProperty + ">" + data + "</td>");

                    if (doTotal)
                    {
                        int pos = Array.IndexOf(totalFieldsArray, i.ToString());

                        if (pos >= 0)
                        {
                            double value;
                            double.TryParse(row[i].ToString(), out value);
                            totalValues[pos] = totalValues[pos] + value;
                        }
                    }

                    if (doSubTotal)
                    {
                        int pos = Array.IndexOf(subTotalFieldsArray, i.ToString());

                        if (pos >= 0)
                        {
                            double value;
                            double.TryParse(row[i].ToString(), out value);
                            subTotalValues[pos] = subTotalValues[pos] + value;
                        }
                    }
                }

                body.AppendLine("</tr>");
            }

            if (doSubTotal)
            {
                body.AppendLine(CreateTotalRow(ref dt, subTotalText, subTotalBy, subTotalFieldsArray, subTotalValues,
                                               fieldFormatList, fieldAlignment, fieldWrap));
            }

            if (doTotal)
            {
                body.AppendLine(CreateTotalRow(ref dt, totalText, 0, totalFieldsArray, totalValues, fieldFormatList,
                                               fieldAlignment, fieldWrap));
            }

            return body.ToString();
        }

        private static String CreateTotalRow(ref DataTable dt, string totalText, int totalFieldIndex,
                                             string[] totalFields, Double[] totalValues, string[] fieldFormatList,
                                             string fieldAlignmentList, string fieldWrapList)
        {
            var rowText = new StringBuilder("");

            rowText.AppendLine("<tr>");

            for (int i = 0; i < dt.Columns.Count; i++)
            {
                int pos = Array.IndexOf(totalFields, i.ToString());
                string data = "";
                string alignment = "";
                string nowrapProperty = "";
                if (pos >= 0)
                {
                    string format = GetFormat(fieldFormatList, i);
                    data = totalValues[pos] < 0
                               ? GetStatic.ParseMinusValue(totalValues[pos])
                               : totalValues[pos].ToString(format.ToUpper());
                    alignment = GetAlignment(fieldAlignmentList, i);
                    nowrapProperty = GetNoWrapping(fieldWrapList, i);
                }

                if (i == totalFieldIndex) data = totalText;

                rowText.AppendLine("<td" + alignment + nowrapProperty + "><b>" + data + "</b></td>");
            }

            rowText.AppendLine("</tr>");
            return rowText.ToString();
        }

        private static string GetFormat(string[] fieldFormatList, int currFieldIndex)
        {
            return fieldFormatList.Length > currFieldIndex ? fieldFormatList[currFieldIndex] : "";
            //return ( pos == -1 ? "": fieldFormatList[pos]);
        }

        private static string GetNoWrapping(string fieldWrapList, int currFieldIndex)
        {
            if (fieldWrapList == "")
                return "";

            string[] wrapListArray = fieldWrapList.Split('|');
            string isWrap = wrapListArray.Length > currFieldIndex ? wrapListArray[currFieldIndex] : "";
            string noWrapValue = "";
            if (isWrap == "Y")
                noWrapValue = " nowrap = \"nowrap\"";
            return noWrapValue;
        }

        private static string GetAlignment(string fieldAlignmentList, int currFieldIndex)
        {
            if (fieldAlignmentList == "")
                return "";

            string[] alignListArray = fieldAlignmentList.Split('|');
            string alignName = alignListArray.Length > currFieldIndex ? alignListArray[currFieldIndex] : "";
            string align = "";
            switch (alignName.ToUpper())
            {
                case "R":
                    align = " align = \"right\"";
                    break;
                case "L":
                    align = " align = \"left\"";
                    break;
                case "C":
                    align = " align = \"center\"";
                    break;
                default:
                    break;
            }
            return align;
        }

        private static string CreateLink(string data)
        {
            return "";
        }

        private static String CreateReportHead(ref DataTable dt, Boolean merge)
        {
            var head = new StringBuilder("");

            if (!merge)
            {
                head.AppendLine("<tr>");
                foreach (DataColumn col in dt.Columns)
                {
                    head.AppendLine("<th>" + col.ColumnName + "</th>");
                }
                head.AppendLine("</tr>");
            }
            else
            {
                var columns = new Dictionary<string, string>();

                foreach (DataColumn col in dt.Columns)
                {
                    int splitPos = col.ColumnName.IndexOf('_');

                    if (splitPos == -1)
                    {
                        columns.Add(col.ColumnName, col.ColumnName);
                    }
                    else
                    {
                        string key = col.ColumnName.Substring(0, splitPos);
                        string value = col.ColumnName.Substring(splitPos + 1, col.ColumnName.Length - splitPos - 1);
                        if (!columns.ContainsKey(key))
                        {
                            columns.Add(key, value);
                        }
                        else
                        {
                            columns[key] = columns[key] + "|" + value;
                        }
                    }
                }

                string row1 = "";
                string row2 = "";

                foreach (var kvp in columns)
                {
                    string[] values = kvp.Value.Split('|');

                    if (values.Length == 1)
                    {
                        row1 = row1 + "<th rowspan = '2'>" + kvp.Key + "</th>";
                    }
                    else
                    {
                        row1 = row1 + "<th align = 'center' colspan='" + values.Length + "'>" + kvp.Key + "</th>";

                        foreach (string value in values)
                        {
                            row2 = row2 + "<th>" + value + "</th>";
                        }
                    }
                }

                head.AppendLine("<tr>" + row1 + "</tr>");
                head.AppendLine("<tr>" + row2 + "</tr>");
            }

            return head.ToString();
        }

        #endregion
    }
}